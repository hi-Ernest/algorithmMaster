动态规划：
    1.递归+记忆化 -> 递推
    2.状态的定义：opt[n], dp[n], fib[n]
    3.状态转移方程：opt[n] = best_of(opt[n-1], opt[n-2],...)
    4.最优子结构

    斐波拉契数列：
        1.递推公式 -> f(n) = f(n-1) + f(n-2)
        2.三目表达式优化
            return n <= 1 ? n : fib(n-1) + fib(n-2)
            时间复杂度: O(2^N)
            2^0 -> 2^1 -> 2^2 ->... 总体是2^N

        3.递归(从上而下) + 记忆化优化(array[]) ==> 递推(改变顺序：从下而上)
            F[0] = 0, F[1] = 1
            for (int i=0; i<=n; ++i) {
                F[i] = F[i-1] + F[i-2];
            }

    障碍版迷宫路径问题
        从end -> start
        状态转移方程：opt[i,j] = opt[i-1,j] + opt[i,j-1]
        else //石头
        opt[i,j] = 0
        时间复杂度：O(N * M)

DP vs 回溯 vs 贪心
- 回溯(递归) - 重复计算（不存在最优子结构，必须穷尽所有条件）
- 贪心 - 永远局部最优
- DP - 记录局部最优子结构/多种记录值